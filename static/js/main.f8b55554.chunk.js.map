{"version":3,"sources":["components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","onClick","onClickCallback","id","className","value","Board","squareList","squares","flat","map","square","generateSquareComponents","console","log","PLAYERS","generateSquares","currentId","row","push","col","idToCoords","Math","floor","App","useState","setSquares","currentPlayer","setCurrentPlayer","winner","setWinner","checkForWinner","line","newSquares","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f8b55554.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Square.css'\n\nconst Square = (props) => {\n  // For Wave 1 enable this \n  //  Component to alert a parent \n  //  component when it's clicked on.\n\n  return <button onClick={() => props.onClickCallback(props.id)}\n    className=\"square\"\n  >\n    {props.value}\n  </button>\n}\n\nSquare.propTypes = {\n  value: PropTypes.string.isRequired,\n  onClickCallback: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nexport default Square;\n","import React from 'react';\nimport './Board.css';\nimport Square from './Square';\nimport PropTypes from 'prop-types';\n\n\nconst generateSquareComponents = (squares, onClickCallback) => {\n  // Complete this for Wave 1\n  // squares is a 2D Array, but \n  //  you need to return a 1D array\n  //  of square components\n  return squares.flat().map((square) => {\n    return <Square\n      value={square.value}\n      id={square.id}\n      onClickCallback={onClickCallback}\n    />\n  });\n}\n\nconst Board = ({ squares, onClickCallback }) => {\n  const squareList = generateSquareComponents(squares, onClickCallback);\n  console.log(squareList);\n  return <div className=\"grid\" >\n    {squareList}\n  </div>\n}\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        value: PropTypes.string.isRequired\n      })\n    )\n  ),\n  onClickCallback: PropTypes.func.isRequired,\n};\n\nexport default Board;\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport Board from './components/Board';\n\n\nconst PLAYERS = ['x', 'o'];\n\nconst generateSquares = () => {\n  const squares = [];\n\n  let currentId = 0;\n\n  for (let row = 0; row < 3; row += 1) {\n    squares.push([]);\n    for (let col = 0; col < 3; col += 1) {\n      squares[row].push({\n        id: currentId,\n        value: '',\n      });\n      currentId += 1;\n    }\n  }\n\n  return squares;\n}\n\nconst idToCoords = (id) => [Math.floor(id / 3), id % 3];\n\n\nconst App = () => {\n\n  // This starts state off as a 2D array of JS objects with\n  // empty value and unique ids.\n  const [squares, setSquares] = useState(generateSquares());\n  const [currentPlayer, setCurrentPlayer] = useState(0);\n  const [winner, setWinner] = useState(null);\n\n  // Wave 2\n  // You will need to create a method to change the square \n  //   When it is clicked on.\n  //   Then pass it into the squares as a callback\n\n  const updateSquares = (id) => {\n    if (winner !== null) {\n      return;\n    }\n\n    const newSquares = [...squares];\n    let [line, col] = idToCoords(id);\n\n    if (squares[line][col].value !== '') {\n      return;\n    } else {\n      newSquares[line][col].value = PLAYERS[currentPlayer];\n      setCurrentPlayer((currentPlayer + 1) % 2);\n      setSquares(newSquares);\n      checkForWinner(id);\n    }\n\n  }\n\n  const checkForWinner = (id) => {\n    // Complete in Wave 3\n    // You will need to:\n    // 1. Go accross each row to see if \n    //    3 squares in the same row match\n    //    i.e. same value\n    // 2. Go down each column to see if\n    //    3 squares in each column match\n    // 3. Go across each diagonal to see if \n    //    all three squares have the same value.\n    let [line, col] = idToCoords(id);\n    if ((squares[line][0].value === squares[line][1].value) && (squares[line][0].value === squares[line][2].value)) {\n      setWinner(squares[line][0].value);\n    } else if ((squares[0][col].value === squares[1][col].value) && (squares[0][col].value === squares[2][col].value)) {\n      setWinner(squares[0][col].value);\n    } else if ((squares[0][0].value === squares[1][1].value) && (squares[0][0].value === squares[2][2].value) && (squares[0][0].value !== '')) {\n      setWinner(squares[0][0].value);\n    } else if ((squares[0][2].value === squares[1][1].value) && (squares[2][0].value === squares[1][1].value) && (squares[0][2].value !== '')) {\n      setWinner(squares[0][2].value);\n    }\n    return;\n  }\n\n  const resetGame = () => {\n    setSquares(generateSquares());\n    setCurrentPlayer(0);\n    setWinner(null);\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>React Tic Tac Toe</h1>\n        <h2>{winner === null ? `Current Player ${PLAYERS[currentPlayer]}` : `Winner is ${winner}`}</h2>\n        <button onClick={resetGame}>Reset Game</button>\n      </header>\n      <main>\n        <Board onClickCallback={updateSquares} squares={squares} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}